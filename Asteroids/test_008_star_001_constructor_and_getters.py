"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import math
import star

class TestStarConstructorAndGetters( unittest.TestCase ):

    def setUp( self ):
        initial_x = 11
        initial_y = 22
        initial_dx = 0
        initial_dy = 0
        self.expected_rotation = 0
        self.expected_radius = 2
        self.expected_world_width = 600
        self.expected_world_height = 800
        self.expected_max_brightness = 255
        self.expected_min_brightness = 0
        self.expected_color = ( 255, 255, 255 )
        
        self.expected_dx = initial_dx
        self.expected_dy = initial_dy
        self.expected_x = initial_x
        self.expected_y = initial_y
        
        self.constructed_obj = star.Star( initial_x, initial_y, self.expected_world_width, self.expected_world_height )
        
        return

    def tearDown( self ):
        return

    def test001_ConstructorSetsX( self ):
        self.assertAlmostEqual( self.constructed_obj.getX( ), self.expected_x )
        return
    
    def test002_ConstructorSetsY( self ):
        self.assertAlmostEqual( self.constructed_obj.getY( ), self.expected_y )
        return
    
    def test003_ConstructorSetsDXAndDY( self ):
        self.assertAlmostEqual( self.constructed_obj.getDX( ), self.expected_dx )
        self.assertAlmostEqual( self.constructed_obj.getDY( ), self.expected_dy )
        return
    
    def test005_ConstructorSetsWorldWidth( self ):
        self.assertEqual( self.constructed_obj.getWorldWidth( ), self.expected_world_width )
        return
    
    def test006_ConstructorSetsWorldHeight( self ):
        self.assertEqual( self.constructed_obj.getWorldHeight( ), self.expected_world_height )
        return

    def test007_ConstructorSetsRotation( self ):
        self.assertEqual( self.constructed_obj.getRotation( ), self.expected_rotation )
        return

    def test008_ConstructorSetsRadius( self ):
        self.assertEqual( self.constructed_obj.getRadius( ), self.expected_radius )
        return
 
    def test009_ConstructorSetsBrightness( self ):
        self.assertGreaterEqual( self.constructed_obj.getBrightness( ), self.expected_min_brightness )
        self.assertLessEqual( self.constructed_obj.getBrightness( ), self.expected_max_brightness )
        return
 
def suite( ):
    return unittest.TestLoader( ).loadTestsFromTestCase( TestStarConstructorAndGetters )

if __name__ == '__main__':
    runner = unittest.TextTestRunner( )
    runner.run( suite( ) )
