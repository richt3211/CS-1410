"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import math
import star

class TestStarEvolve( unittest.TestCase ):

    def setUp( self ):
        initial_x = 11
        initial_y = 22
        initial_dx = 0
        initial_dy = 0
        self.expected_rotation = 0
        self.expected_radius = 2
        self.expected_world_width = 600
        self.expected_world_height = 800
        self.expected_max_brightness = 255
        self.expected_min_brightness = 0
        self.expected_color = ( 255, 255, 255 )
        
        self.expected_dx = initial_dx
        self.expected_dy = initial_dy
        self.expected_x = initial_x
        self.expected_y = initial_y
        
        self.constructed_obj = star.Star( initial_x, initial_y, self.expected_world_width, self.expected_world_height )
        return

    def tearDown( self ):
        return

    def test001_evolveDoesNotMoveStar( self ):
        dt = 0.25

        self.constructed_obj.evolve( dt )
        
        self.assertEqual( self.constructed_obj.getX( ), self.expected_x )
        self.assertEqual( self.constructed_obj.getY( ), self.expected_y )
        self.assertEqual( self.constructed_obj.getDX( ), self.expected_dx )
        self.assertEqual( self.constructed_obj.getDY( ), self.expected_dy )
        return
    
    def test002_evolveChangesStarBrightnessAndColor( self ):
        dt = 0.25
        old_brightness = self.constructed_obj.getBrightness( )
        old_color = self.constructed_obj.getColor( )

        # repeat 100 times.  Making it very unlikely that all 10 do not change the brightness
        for i in range( 100 ):
            self.constructed_obj.evolve( dt )
        
        self.assertNotEqual( self.constructed_obj.getBrightness( ), old_brightness )
        self.assertNotEqual( self.constructed_obj.getColor( ), old_color )
        new_brightness = self.constructed_obj.getBrightness( )
        new_color = ( new_brightness, new_brightness, new_brightness )
        self.assertEqual( self.constructed_obj.getColor( ), new_color )
        return
    
def suite( ):
    return unittest.TestLoader( ).loadTestsFromTestCase( TestStarEvolve )

if __name__ == '__main__':
    runner = unittest.TextTestRunner( )
    runner.run( suite( ) )
