"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import math
import circle

class TestCircleSetters( unittest.TestCase ):

    def setUp( self ):
        self.expected_x = 333
        self.expected_y = 444
        self.expected_dx = 11
        self.expected_dy = 22
        self.expected_rotation = 45
        self.expected_radius = 23
        self.expected_world_width = 600
        self.expected_world_height = 800
        self.expected_color = ( 255, 255, 255 )
        
        self.constructed_obj = circle.Circle( self.expected_x, self.expected_y, self.expected_dx, self.expected_dy, self.expected_rotation, self.expected_radius, self.expected_world_width, self.expected_world_height )
        
        return

    def tearDown( self ):
        return

    def test001_SetsRadius( self ):
        new_radius = self.expected_radius / 2.0
        self.constructed_obj.setRadius( new_radius )
        self.assertEqual( self.constructed_obj.getRadius( ), new_radius )
        return
    
    def test002_SetsLargeRadius( self ):
        new_radius = self.expected_radius * 2.0
        self.constructed_obj.setRadius( new_radius )
        self.assertEqual( self.constructed_obj.getRadius( ), new_radius )
        return
    
    def test003_DoesNotSetSmallRadius( self ):
        new_radius = 0.99
        self.constructed_obj.setRadius( new_radius )
        self.assertNotEqual( self.constructed_obj.getRadius( ), new_radius )
        self.assertEqual( self.constructed_obj.getRadius( ), self.expected_radius )
        return
    
    def test004_DoesNotSetNegativeRadius( self ):
        new_radius = -1.2
        self.constructed_obj.setRadius( new_radius )
        self.assertNotEqual( self.constructed_obj.getRadius( ), new_radius )
        self.assertEqual( self.constructed_obj.getRadius( ), self.expected_radius )
        return
    
    def test004_setsColor( self ):
        new_color = ( 1, 2, 3 )
        expected_color = ( 1, 2, 3 )
        self.constructed_obj.setColor( new_color )
        self.assertEqual( self.constructed_obj.getColor( ), expected_color )
        return

   
def suite( ):
    return unittest.TestLoader( ).loadTestsFromTestCase( TestCircleSetters )

if __name__ == '__main__':
    runner = unittest.TextTestRunner( )
    runner.run( suite( ) )
